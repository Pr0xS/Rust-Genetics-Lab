{"version":3,"sources":["./src/app/genetics/breeding-details/breeding-process-viewer/breeding-process-viewer.component.ts","./src/app/genetics/breeding-details/breeding-process-viewer/breeding-process-viewer.component.html","./src/app/about/about.component.ts","./src/app/about/about.component.html","./src/environments/environment.ts","./src/app/genetics/breeding-details/loading-simulation/loading-simulation.component.ts","./src/app/genetics/breeding-details/loading-simulation/loading-simulation.component.html","./src/app/genetics/breeding-details/seed-details/beautifull-genetics/beautifull-genetics.component.html","./src/app/genetics/breeding-details/seed-details/beautifull-genetics/beautifull-genetics.component.ts","./src/app/genetis.models.ts","./src/app/genetics/breeding-details/breeding-process-viewer/viewer-print-childs/viewer-print-childs.component.ts","./src/app/genetics/breeding-details/breeding-process-viewer/viewer-print-childs/viewer-print-childs.component.html","./src/app/donate/donate.component.ts","./src/app/donate/donate.component.html","./src/app/genetics.service.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/genetics.worker.ts","./src/app/genetics/genetics.component.ts","./src/app/genetics/genetics.component.html","./src/app/app.module.ts","./src/app/genetics/breeding-details/seed-details/seed-details.component.html","./src/app/genetics/breeding-details/seed-details/seed-details.component.ts","./src/app/genetics/genetics-input/genetics-input.component.ts","./src/app/genetics/genetics-input/genetics-input.component.html","./src/app/navbar/navbar.component.ts","./src/app/navbar/navbar.component.html","./src/app/genetics/genetics-input/options/options.component.ts","./src/app/genetics/genetics-input/options/options.component.html","./src/app/app-routing.module.ts","./src/app/material.module.ts","./src/app/genetics/breeding-details/breeding-details.component.ts","./src/app/genetics/breeding-details/breeding-details.component.html","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { Component, ElementRef, Inject, OnInit, ViewChild } from '@angular/core';\nimport { GeneticsService } from 'src/app/genetics.service';\nimport { Species } from 'src/app/genetis.models';\n\n\nimport {MAT_DIALOG_DATA} from '@angular/material/dialog'\n\n\n@Component({\n    selector: 'app-breeding-process-viewer',\n    templateUrl: './breeding-process-viewer.component.html',\n    styleUrls: ['./breeding-process-viewer.component.scss']\n})\nexport class BreedingProcessViewerComponent implements OnInit {\n    @ViewChild(\"mainSample\") mainSample!: ElementRef;\n\n\n    constructor(private geneticsService: GeneticsService,\n                @Inject(MAT_DIALOG_DATA) public sample: Species) { }\n\n    ngOnInit(): void {\n    }\n\n    getSpecies(genes: string): Species {\n        return this.geneticsService.getSpeciesInfo(genes)\n    }\n\n    focusMainSample() {\n        this.mainSample.nativeElement.scrollIntoView({ behavior: \"smooth\", inline: \"center\", block: \"center\"})\n        console.log(\"doing something\")\n    }\n}\n","\n<mat-dialog-content>\n    <div #mainSample class=\"mainSample\" (click)=\"focusMainSample()\">\n        <div class=\"sample\">\n            <app-seed-details [sample]=\"sample\"></app-seed-details>\n            <div class=\"arrow\" *ngIf=\"sample.parents.length\"></div>\n        </div>\n    </div>\n\n    <div class=\"childSamples\" *ngIf=\"sample.parents.length\">\n        <app-viewer-print-childs [sample]=\"sample\"></app-viewer-print-childs>\n    </div>\n</mat-dialog-content>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-about',\n  templateUrl: './about.component.html',\n  styleUrls: ['./about.component.scss']\n})\nexport class AboutComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"main\">\n    <div class=\"about\">\n        <h2>Hello there!!</h2>\n        <p>I'm Pr0xS and I have made this app mainly because I'm too lazy to do the crossbreeding manually.</p>\n        <p>I've been using other Apps that do the same thing, but those only take into account the first generation, and I wanted something that find the optimal solution with the current available samples even if that mean to have multiple generations.</p>\n        <p>And that is the reason this app exists.</p>\n        \n        <p>I've been doing this app while learning how to do it, so there are a lot of room for improvement and also I expect it to have some bugs.</p>\n        <p>This app was inspired by the one made by the user <a href=\"https://www.reddit.com/user/Diffrnt\" target=\"_blank\">u/Diffrnt</a> and the guide on how crossbreeding works on Rust by <a href=\"https://www.youtube.com/channel/UCbUhGPYHIaL6R8XCXzN9lRA\"target=\"_blank\">Tamura77</a>.</p>\n        \n        <p>The technologies that I have been used are:</p>\n        <ul>\n            <li><a href=\"https://angular.io/\" target=\"_blank\">Angular</a> (Front-End framework)</li>\n            <li><a href=\"https://material.angular.io/\" target=\"_blank\">Angular Material</a> (for themeing)</li>\n            <li>Github (for hosting the code)</li>\n            <li>Github Pages (for hosting the app)</li>\n        </ul>\n        \n        <p>If you have any suggetion you can contact me on:</p>\n        <ul>\n            <li>Discord: Pr0xS#5813</li>\n            <li>Reddit: <a href=\"\">u/Pr0xS</a></li>\n            <li>Github: <a href=\"https://github.com/Pr0xS\" target=\"_blank\">Pr0xS</a></li>\n        </ul>\n\n        <p>If you want to contribuite to the project, you can do it throught improving the code on github or <a routerLink=\"/donate\">donating</a></p>\n    </div>\n</div>","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n    selector: 'app-loading-simulation',\n    templateUrl: './loading-simulation.component.html',\n    styleUrls: ['./loading-simulation.component.scss']\n})\nexport class LoadingSimulationComponent implements OnInit {\n    \n    constructor() { }\n\n    ngOnInit(): void { }\n\n}\n","<div class=\"loading\">\n    <mat-spinner></mat-spinner>\n</div>","<span *ngFor=\"let gen of genetics.split(''); let i = index\">\n    <div class=\"circle\" \n        [class.good]=\"gen == 'G' || gen == 'Y' || gen == 'H'\"\n        [class.bad]=\"gen == 'W' || gen == 'X'\">\n        {{gen}}\n    </div>\n    <div class=\"separator\" *ngIf=\"i != genetics.split('').length - 1\">\n         - \n    </div>\n</span>\n<!-- {{genetics}} -->\n","import { Component, Input, OnInit } from '@angular/core';\n\n@Component({\n    selector: 'app-beautifull-genetics',\n    templateUrl: './beautifull-genetics.component.html',\n    styleUrls: ['./beautifull-genetics.component.scss']\n})\nexport class BeautifullGeneticsComponent implements OnInit {\n    @Input() genetics!: string;\n    genes: string[];\n\n    constructor() {\n        this.genes = [];\n    }\n\n    ngOnInit(): void {\n        this.genes = this.splitGenes(this.genetics);\n    }\n\n    splitGenes(genes: string): string[] {\n        return genes.split('');\n    }\n\n}\n","export const defaultGenesWeight: Record<string, number> = {\n    \"G\": 1,\n    \"Y\": 1,\n    \"H\": 0.5,\n    \"W\": -0.1,\n    \"X\": -0.1\n}\n\nexport const genesCrossBreedingValues: Record<string, number> = {\n    \"G\": 0.6,\n    \"Y\": 0.6,\n    \"H\": 0.6,\n    \"W\": 1,\n    \"X\": 1\n}\n\nexport class Species {\n    genesWeight: Record<string, number>\n    \n    parents: string[];\n    genes: string;\n    probability: number;\n    value: number;\n    generation: number;\n    baseSample: string;\n\n    constructor(parents: string[], genes: string, probability: number, generation: number, genesWeight:Record<string, number>, baseSample: string) {\n        this.genesWeight = genesWeight\n\n        this.parents = parents;\n        this.genes = genes;\n        this.probability = Math.round(probability * 1e2) / 1e2;\n        this.value = this.speciesAnalyze(genes);\n        this.generation = generation;\n        this.baseSample = baseSample\n\n    }\n\n    speciesAnalyze(genes: string): number {\n        let value = 0;\n        [...genes].forEach(gene => {\n            value += this.genesWeight[gene];\n        });\n        return Math.round(value * 1e2) / 1e2\n    }\n};\n\nexport interface Settings {\n    mode: \"auto\" | \"manual\";\n    auto: {\n        minScoreSample: number;\n        minGoodSamples: number;\n    };\n    manual: {\n        maxNumCombinations: number;\n        maxNumGenerations: number;\n    }\n\n    genesWeight: Record<string, number>\n}\n\nexport const defaultSettings: Settings = {\n        mode: \"auto\",\n        auto: {\n            minScoreSample: 6,\n            minGoodSamples: 4\n        },\n        manual: {\n            maxNumCombinations: 8,\n            maxNumGenerations: 1\n        },\n        genesWeight: {...defaultGenesWeight}\n}","import { Component, ElementRef, EventEmitter, Input, OnInit, Output, QueryList, ViewChildren } from '@angular/core';\nimport { GeneticsService } from 'src/app/genetics.service';\nimport { Species } from 'src/app/genetis.models';\n\n\n@Component({\n    selector: 'app-viewer-print-childs',\n    templateUrl: './viewer-print-childs.component.html',\n    styleUrls: ['./viewer-print-childs.component.scss']\n})\nexport class ViewerPrintChildsComponent implements OnInit {\n    @ViewChildren(\"test\") testElement!: QueryList<ElementRef>;\n\n    @Input() sample!: Species;\n    @Output() finishedLoading: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    selectedSample!: string\n    childToFocus: number;\n\n    constructor(private geneticsService: GeneticsService) {\n        this.childToFocus = 0;\n    }\n\n    ngOnInit(): void {\n    }\n\n    ngAfterViewInit(): void {\n        this.finishedLoading.emit(true);\n    }\n\n    getSpecies(genes: string): Species {\n        return this.geneticsService.getSpeciesInfo(genes)\n    }\n    \n    onSelect(sample: string) {\n        this.selectedSample = \"\";\n        this.selectedSample = sample;\n        console.log(sample);\n    }\n\n    setChildToFocus(id: number) {\n        this.childToFocus = id;\n        console.log(\"setChildToFocus\")\n        this.focus();\n    }\n\n    focus() {\n        console.log(\"focus\")\n        let focusTo = this.testElement.find(element => element.nativeElement.id == this.childToFocus)\n        console.log(focusTo)\n        focusTo?.nativeElement.scrollIntoView({ behavior: \"smooth\", inline: \"center\", block: \"center\"})\n    }\n\n}\n","<hr class=\"hDivider\">\n<div class=\"parentsList\">\n    <div class=\"leftMargin\"></div>\n\n    <div class=\"baseSample\" *ngIf=\"sample.baseSample != 'ANY'\">\n        <div class=\"sectionTitle\">Base Sample</div>\n        <div class=\"sectionContent\">\n            <div #test \n                class=\"item\"\n                [class.selected]=\"sample.baseSample === selectedSample\"\n                id=\"-1\"\n                (click)=\"onSelect(sample.baseSample); setChildToFocus(-1)\">\n                <app-seed-details [sample]=\"getSpecies(sample.baseSample)\"></app-seed-details>\n                <div class=\"arrow\" *ngIf=\"sample.baseSample === selectedSample && getSpecies(sample.baseSample).parents.length\"></div>\n            </div>\n\n        </div>\n    </div>\n    \n        <div class=\"vDivider\" *ngIf=\"sample.baseSample != 'ANY'\"></div>\n\n    <div class=\"parentsSamples\">\n        <div class=\"sectionTitle\">Parents Samples</div>\n        <div class=\"sectionContent\">\n            <div #test \n                *ngFor=\"let parent of sample.parents; let i = index\"\n                class=\"item\"\n                [class.selected]=\"parent === selectedSample\"\n                id=\"{{i}}\"\n                (click)=\"onSelect(parent); setChildToFocus(i)\">\n                <app-seed-details [sample]=\"getSpecies(parent)\"></app-seed-details>\n                <div class=\"arrow\" *ngIf=\"parent === selectedSample && getSpecies(selectedSample).parents.length\"></div>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"rightMargin\"></div>\n</div>\n\n<div>\n    <app-viewer-print-childs\n        *ngIf=\"selectedSample && getSpecies(selectedSample).parents.length\"\n        [sample]=\"getSpecies(selectedSample)\"\n        (finishedLoading)=\"focus()\"></app-viewer-print-childs>\n</div>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-donate',\n  templateUrl: './donate.component.html',\n  styleUrls: ['./donate.component.scss']\n})\nexport class DonateComponent implements OnInit {\n  bitcoinAddress = \"1L2LzBsMZxqPXj95xJspFJf29vKy6u1YVb\"\n  \n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"donateContainer\">\n    <div class=\"donate\">\n        <p>Donating is always optional and only if you found the App interesing and useful</p>\n        <p>All donationgs will help me improving the app in the future</p>\n\n        <br>\n        <br>\n\n        <p>You can do it using Paypal:</p>\n        <div class=\"paypal\">\n            <form #form action=\"https://www.paypal.com/donate\" method=\"post\" target=\"_blank\">\n                <input type=\"hidden\" name=\"business\" value=\"C29ENRASFSEDC\" />\n                <input type=\"hidden\" name=\"item_name\" value=\"For keep improving the app, and if needed get a better hosting\" />\n                <input type=\"hidden\" name=\"currency_code\" value=\"EUR\" />\n                <input type=\"image\" src=\"https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif\" name=\"submit\" (click)=\"form.submit()\" title=\"PayPal - The safer, easier way to pay online!\" alt=\"Donate with PayPal button\" />\n                <img alt=\"\" src=\"https://www.paypal.com/en_US/i/scr/pixel.gif\" width=\"1\" height=\"1\" />\n            </form>  \n        </div>\n        \n        <br>\n        <br>\n    \n        <p>And since cyptocurrencies are popular you can also support the app with them!!</p>\n\n        <div class=\"bitcoin\">\n            <img src=\"./assets/images/bitcoin.png\" alt=\"bitcoin logo\" height=\"50px\">\n            <div class=\"address\">\n                {{bitcoinAddress}}\n            </div>\n\n            <button mat-icon-button color=\"warn\" aria-label=\"Copy Bitcoin Address to clipboard\" matTooltip=\"Copy Bitcoin Address to clipboard\" [cdkCopyToClipboard]=\"bitcoinAddress\">\n                <mat-icon>content_paste</mat-icon>\n            </button>\n        </div>\n\n    </div>        \n</div>","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable} from 'rxjs';\n\nimport { defaultSettings, Settings, Species } from \"./genetis.models\"\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GeneticsService {\n    settings: Settings;\n\n    runningSimulation_Subject = new BehaviorSubject<boolean>(false);\n\n    speciesDB: {[species: string]: Species[]}\n    speciesDB_Subject = new BehaviorSubject<{[species: string]: Species[]}>({})\n\n    constructor() {\n        this.speciesDB = {};\n        this.settings = JSON.parse(JSON.stringify(defaultSettings))\n    }\n\n    getSpeciesInfo(genes: string) {\n        return this.speciesDB[genes][0];\n    }\n\n    startSimulation(samples: string[], settings: Settings) {\n        const geneticsWorker = new Worker('./genetics.worker', { type: 'module' });\n\n        this.runningSimulation_Subject.next(true);\n        this.speciesDB_Subject.next({});\n\n        geneticsWorker.onmessage = ({ data }) => {\n            this.speciesDB = data;\n            this.updateChanges();\n            this.runningSimulation_Subject.next(false);\n        };\n        geneticsWorker.postMessage({settings: settings, samples: samples});\n    }\n\n    updateChanges() {\n        this.speciesDB_Subject.next(this.speciesDB);\n        console.log(this.speciesDB);\n    }\n\n    getNewSamples(): Observable<{[species: string]: Species[]}> {\n        return this.speciesDB_Subject.asObservable();\n    }\n}","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'rust-genetics';\n}\n","<app-navbar></app-navbar>\n\n<div class=\"appContainer\">\n    <router-outlet></router-outlet>\n</div>","module.exports = __webpack_public_path__ + \"0.worker.js\"","import { Component, OnInit } from '@angular/core';\nimport { GeneticsService } from '../genetics.service';\n\n@Component({\n    selector: 'app-genetics',\n    templateUrl: './genetics.component.html',\n    styleUrls: ['./genetics.component.scss']\n})\nexport class GeneticsComponent implements OnInit {\n    runningSimulation: boolean;\n\n    constructor(private geneticsService: GeneticsService) {\n        this.runningSimulation = false;\n    }\n\n    ngOnInit(): void {\n        this.geneticsService.runningSimulation_Subject.subscribe(runningSimulation => {\n            this.runningSimulation = runningSimulation;\n        });\n    }\n}\n","<div class=\"geneticsAppContainer\">\n        <app-genetics-input></app-genetics-input>\n        <app-breeding-details></app-breeding-details>\n</div>\n\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { GeneticsComponent } from './genetics/genetics.component';\nimport { GeneticsInputComponent } from './genetics/genetics-input/genetics-input.component';\nimport { BeautifullGeneticsComponent } from './genetics/breeding-details/seed-details/beautifull-genetics/beautifull-genetics.component'\nimport { BreedingProcessViewerComponent } from './genetics/breeding-details/breeding-process-viewer/breeding-process-viewer.component'\nimport { ViewerPrintChildsComponent } from './genetics/breeding-details/breeding-process-viewer/viewer-print-childs/viewer-print-childs.component'\nimport { OptionsComponent } from './genetics/genetics-input/options/options.component'\nimport { LoadingSimulationComponent } from './genetics/breeding-details/loading-simulation/loading-simulation.component'\nimport { BreedingDetailsComponent } from './genetics/breeding-details/breeding-details.component';\nimport { SeedDetailsComponent } from './genetics/breeding-details/seed-details/seed-details.component';\nimport { AboutComponent } from './about/about.component';\nimport { NavbarComponent } from './navbar/navbar.component';\nimport { DonateComponent } from './donate/donate.component'\n\nimport { MaterialModule } from './material.module'\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    GeneticsComponent,\n    GeneticsInputComponent,\n    BreedingDetailsComponent,\n    SeedDetailsComponent,\n    BeautifullGeneticsComponent,\n    BreedingProcessViewerComponent,\n    ViewerPrintChildsComponent,\n    OptionsComponent,\n    LoadingSimulationComponent,\n    AboutComponent,\n    NavbarComponent,\n    DonateComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n    BrowserAnimationsModule,\n    MaterialModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","<div class=\"seed\">\n    <mat-card >\n        <mat-card-header class=\"customHeader\">\n            <mat-card-title><app-beautifull-genetics [genetics]=\"sample.genes\"></app-beautifull-genetics></mat-card-title>\n            <mat-card-subtitle>\n                <div class=\"customSubtitle\">\n                    <div>Score: {{sample.value}}</div>\n                    <div>Chance: {{sample.probability}}%</div>\n                    <div>Gen: {{sample.generation}}</div>\n                </div>\n            </mat-card-subtitle>\n        </mat-card-header>\n        <hr class=\"customDivider\">\n\n        <mat-card-content class=\"customContent\">\n            <div *ngIf=\"parentsData.length; else initialSample\">\n                <div class=\"baseSample\">\n                    <div class=\"contentSectionTitle\">Base Sample</div>\n                    <div *ngIf=\"baseSampleData != undefined; else anySample\" class=\"parentData\">\n                        <app-beautifull-genetics [genetics]=\"baseSampleData.genes\"></app-beautifull-genetics>\n                        <div class=\"parentDetails\">\n                            <div class=\"parentDetailsItem\">{{ baseSampleData.probability }}%</div>\n                            <div class=\"parentDetailsItem\">Gen: {{ baseSampleData.generation }}</div>\n                        </div>\n                    </div>\n                    <ng-template #anySample>\n                        <div class=\"any\">\n                            ANY\n                        </div>\n                    </ng-template>\n\n                </div>\n                <hr class=\"customDivider2\">\n                <div class=\"parentSamplesGeneral\">\n                    <div class=\"contentSectionTitle\">Parents Samples</div>\n\n                    <div *ngFor=\"let parent of parentsData\" class=\"parentData\">\n                        <app-beautifull-genetics [genetics]=\"parent.genes\"></app-beautifull-genetics>\n                        <div class=\"parentDetails\">\n                            <div class=\"parentDetailsItem\">{{ parent.probability }}%</div>\n                            <div class=\"parentDetailsItem\">Gen: {{ parent.generation }}</div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <ng-template #initialSample>\n                <div class=\"initialSample\">\n                    Its an initial Sample\n                </div>\n            </ng-template>\n        </mat-card-content>\n\n        <!-- <mat-card-content class=\"customContent\">\n            <div *ngIf=\"parentsData.length; else initialSample\">\n                <div *ngFor=\"let parent of parentsData\" class=\"parentGeneral\">\n                    <app-beautifull-genetics [genetics]=\"parent.genes\"></app-beautifull-genetics>\n                    <div class=\"parentData\">\n                        <div class=\"parentDataItem\">{{parent.probability}}%</div>\n                        <div class=\"parentDataItem\">Gen: {{parent.generation}}</div>\n                    </div>\n                </div>\n            </div>\n            <ng-template #initialSample>\n                <div class=\"initialSample\">\n                    Its an initial Sample\n                </div>\n            </ng-template>\n        </mat-card-content> -->\n    </mat-card>\n</div>\n","import { Component, OnInit, Input } from '@angular/core';\nimport { GeneticsService } from 'src/app/genetics.service';\nimport { Species } from 'src/app/genetis.models';\n\n\n@Component({\n    selector: 'app-seed-details',\n    templateUrl: './seed-details.component.html',\n    styleUrls: ['./seed-details.component.scss']\n})\nexport class SeedDetailsComponent implements OnInit {\n    @Input() sample!: Species;\n\n    parentsData: Species[];\n    baseSampleData: Species | undefined;\n\n    constructor(private geneticsService: GeneticsService) {\n        this.parentsData = [];\n    }\n\n    ngOnInit(): void {\n        for (let parent of this.sample.parents) {\n            this.parentsData.push(this.geneticsService.getSpeciesInfo(parent));\n        }\n\n        if (this.sample.baseSample != \"ANY\") {\n            this.baseSampleData = this.geneticsService.getSpeciesInfo(this.sample.baseSample);\n        } else {\n            this.baseSampleData = undefined;\n        }\n    }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\n\nimport { OptionsComponent } from './options/options.component';\nimport { GeneticsService } from 'src/app/genetics.service';\nimport { Settings, defaultSettings } from 'src/app/genetis.models';\n\n@Component({\n    selector: 'app-genetics-input',\n    templateUrl: './genetics-input.component.html',\n    styleUrls: ['./genetics-input.component.scss']\n})\nexport class GeneticsInputComponent implements OnInit {\n    // samples = [\"WGGWGW\", \"XWYYHX\", \"HHGXYW\", \"YGYWHH\", \"YYHHGG\"]\n    samples = [\"WYYWHW\", \"WYHHHY\", \"GGYWYX\", \"XHHHHG\", \"WYHXWW\", \"WHYWYX\", \"WYXXGY\", \"HGYXGW\", \"WGYWGH\", \"XYYYGY\", \"XGGXHW\", \"GHYXYX\", \"XXHXYW\", \"XHYWWH\", \"GXHXYX\", \"XYHWYW\", \"XHHWGH\", \"XHYWYW\", \"XYHYYW\", \"XHHWGY\", \"XGXXYX\", \"WYHXGH\", \"GWYXHH\", \"XGYWXX\", \"HYYWHH\", \"XXWYHW\", \"WGYWHX\", \"GWHXHH\", \"WHYXHW\", \"XYGXGX\", \"WHGWGG\", \"XYGXGW\", \"WYGXHH\", \"XHYWHW\", \"WYGXGX\", \"XYYWYH\", \"WHWXXW\", \"WXHGGW\", \"WYYYGW\", \"WXGWGW\"];\n    // samples = [\"YYYWYX\", \"GGHGHY\", \"HHGGGY\"];\n    // samples = [\"WYYWHW\", \"WYHHHY\", \"GGYWYX\", \"XHHHHG\", \"GWYXHH\", \"XGYWXX\", \"HYYWHH\", \"XXWYHW\", \"WGYWHX\", \"GWHXHH\", \"WHYXHW\", \"XYGXGX\", \"WHGWGG\", \"XYGXGW\", \"WYGXHH\", \"XHYWHW\", \"WYGXGX\", \"XYYWYH\", \"WHWXXW\", \"WXHGGW\", \"WYYYGW\", \"WXGWGW\"]\n\n    settings: Settings;\n\n    constructor(private geneticsService: GeneticsService, public dialog: MatDialog) {\n        //https://stackoverflow.com/questions/61421873/object-copy-using-spread-operator-actually-shallow-or-deep\n        this.settings = JSON.parse(JSON.stringify(defaultSettings));\n    }\n\n    samplesToTextArea(data: string[]) {\n        return data.join(\"\\n\");\n    };\n\n    toArray(value: string): void {\n        // let test = value.split(/[\\r\\n]+/)\n        let test = value.split(/[\\r\\n]+| |,|-/)\n        test.forEach((genes, idx) => {\n            test[idx] = genes.toUpperCase();\n        })\n        this.samples = test;\n    }\n\n    simulation() {\n        this.geneticsService.startSimulation(this.samples, this.settings);\n    }\n\n    onOpenOptions() {\n        const optionsRef = this.dialog.open(OptionsComponent, {data: this.settings});\n\n        optionsRef.afterClosed().subscribe(settings => {\n            if (settings != undefined) {\n                this.settings = settings;\n            }\n        });\n    }\n\n    ngOnInit(): void {\n        // this.simulation()\n    }\n\n}\n","\n<div class=\"inputContainer\">\n    <div class=\"title\">\n        <h1>My Samples</h1>\n    </div>\n    <mat-form-field class=\"customMatForm\">\n        <textarea\n            matInput\n            class=\"customTextArea\"\n            cdkTextareaAutosize\n            cdkAutosizeMinRows=\"10\"\n            cdkAutosizeMaxRows=\"30\"\n            ngModel (ngModelChange)=\"toArray($event)\"\n            [ngModel]=\"samplesToTextArea(samples)\">\n        </textarea>\n    </mat-form-field>\n    \n    <div class=\"buttons\">\n            <button mat-raised-button color=\"primary\" class=\"mybuttons\" (click)=\"simulation()\">Simulation</button>\n            <button mat-raised-button color=\"accent\" class=\"mybuttons\" (click)=\"onOpenOptions()\">Options</button>\n\n    </div>\n</div>\n\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.scss']\n})\nexport class NavbarComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<mat-toolbar class=\"mat-elevation-z6 navbar\">\n    <div class=\"brand\" routerLink=\"\">\n        <img src=\"./assets/images/rust.svg\" alt=\"Rust Logo\" width=112 height=28 class=\"logo\">\n        <span class=\"name\">Genetics lab</span>\n    </div>\n    <span class=\"spacer\"></span>\n    <span class=\"button\"><button routerLink=\"/about\" mat-raised-button>About</button></span>\n    <span class=\"button\"><button routerLink=\"/donate\" mat-raised-button color=\"accent\">Donate</button></span>\n</mat-toolbar>","import { Component, Inject, OnInit } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { GeneticsInputComponent } from '../genetics-input.component';\n\nimport { defaultSettings, Settings } from 'src/app/genetis.models'\n\n@Component({\n    selector: 'app-options',\n    templateUrl: './options.component.html',\n    styleUrls: ['./options.component.scss']\n})\nexport class OptionsComponent implements OnInit {\n    settings: Settings;\n    \n    maxNumCombinationsOptions = [2, 3, 4, 5, 6, 7, 8];\n    maxNumGenerationsOptions = [1, 2, 3, 4, 5]\n\n    sliderMinValue: number = -0.5;\n    sliderMaxValue: number = 1;\n    sliderStepValue: number = 0.1;\n\n    constructor(public dialogRef: MatDialogRef<GeneticsInputComponent>, @Inject(MAT_DIALOG_DATA) public newSettings: Settings) {\n        this.settings = JSON.parse(JSON.stringify(this.newSettings));\n    }\n\n    ngOnInit(): void {\n    }\n\n    onReset() {\n        this.settings = JSON.parse(JSON.stringify(defaultSettings));\n    }\n\n    onCancel() {\n        this.dialogRef.close();\n    }\n}","<div mat-dialog-content>\n    <div class=\"main\">\n        <div class=\"mode\">\n            Simulation Mode settings\n            <mat-radio-group aria-label=\"Select a Simulation Mode\" [(ngModel)]=\"settings.mode\" class=\"modeSelector\">\n                <mat-radio-button value=\"auto\" class=\"modeSelection\" matTooltip=\"Automatic mode will do a less intesive search and stop when find some good samples\" matTooltipShowDelay=1000>Automatic Mode</mat-radio-button>\n                <mat-radio-button value=\"manual\" class=\"modeSelection\" matTooltip=\"Manual mode will perform the simulation specified bellow\" matTooltipShowDelay=1000>Manual Settings</mat-radio-button>\n            </mat-radio-group>\n    \n            <div class=\"automatic\" *ngIf=\"settings.mode == 'auto'\">\n                <div>\n                    <mat-form-field color=\"accent\">\n                        <mat-label>Min score of sample</mat-label>\n                        <input type=\"number\" step=\"0.1\" matInput [(ngModel)]=\"settings.auto.minScoreSample\" matTooltip=\"The minimun score needed for a sample to be considered a good sample\" matTooltipShowDelay=1000>\n                    </mat-form-field>\n        \n                    <mat-form-field color=\"accent\">\n                        <mat-label>Min number of good samples</mat-label>\n                        <input type=\"number\" matInput [(ngModel)]=\"settings.auto.minGoodSamples\" matTooltip=\"The minimun number of good samples before stoping the simulation\" matTooltipShowDelay=1000>\n                    </mat-form-field>\n                </div>\n            </div>\n            \n            <div class=\"manual\" *ngIf=\"settings.mode == 'manual'\">\n                <div>\n                    <mat-form-field color=\"accent\">\n                        <mat-label>Max number of samples per crossbreeding</mat-label>\n                        <mat-select [(value)]=\"settings.manual.maxNumCombinations\" matTooltip=\"The maximum number of samples per crossbreeding to take into account\" matTooltipShowDelay=1000>\n                            <mat-option *ngFor=\"let option of maxNumCombinationsOptions\" [value]=\"option\"> {{option}} </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n        \n                    <mat-form-field color=\"accent\">\n                        <mat-label>Max number of generations</mat-label>\n                        <mat-select [(value)]=\"settings.manual.maxNumGenerations\" matTooltip=\"The maximun number of generations to simulate\" matTooltipShowDelay=1000>\n                            <mat-option *ngFor=\"let option of maxNumGenerationsOptions\" [value]=\"option\"> {{option}} </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </div>\n            </div>\n        </div>\n        \n        <div class=\"generalSettings\">\n            General Settings\n            <div class=\"genesWeightGroup\">\n                <div class=\"genesWeigh\">\n                    <div class=\"circle good\">G</div>\n                    <mat-slider class=\"genesSlider\" [(ngModel)]=\"settings.genesWeight['G']\" (input)=\"settings.genesWeight['G'] = $event.value!\" [max]=\"sliderMaxValue\" [min]=\"sliderMinValue\" [step]=\"sliderStepValue\"></mat-slider>\n                    {{settings.genesWeight['G']}}\n                </div>\n                <div class=\"genesWeigh\">\n                    <div class=\"circle good\">Y</div>\n                    <mat-slider class=\"genesSlider\" [(ngModel)]=\"settings.genesWeight['Y']\" (input)=\"settings.genesWeight['Y'] = $event.value!\" [max]=\"sliderMaxValue\" [min]=\"sliderMinValue\" [step]=\"sliderStepValue\"></mat-slider>\n                    {{settings.genesWeight['Y']}}\n                </div>\n                <div class=\"genesWeigh\">\n                    <div class=\"circle good\">H</div>\n                    <mat-slider class=\"genesSlider\" [(ngModel)]=\"settings.genesWeight['H']\" (input)=\"settings.genesWeight['H'] = $event.value!\" [max]=\"sliderMaxValue\" [min]=\"sliderMinValue\" [step]=\"sliderStepValue\"></mat-slider>\n                    {{settings.genesWeight['H']}}\n                </div>\n                <div class=\"genesWeigh\">\n                    <div class=\"circle bad\">W</div>\n                    <mat-slider class=\"genesSlider\" [(ngModel)]=\"settings.genesWeight['W']\" (input)=\"settings.genesWeight['W'] = $event.value!\" [max]=\"sliderMaxValue\" [min]=\"sliderMinValue\" [step]=\"sliderStepValue\"></mat-slider>\n                    {{settings.genesWeight['W']}}\n                </div>\n                <div class=\"genesWeigh\">\n                    <div class=\"circle bad\">X</div>\n                    <mat-slider class=\"genesSlider\" [(ngModel)]=\"settings.genesWeight['X']\" (input)=\"settings.genesWeight['X'] = $event.value!\" [max]=\"sliderMaxValue\" [min]=\"sliderMinValue\" [step]=\"sliderStepValue\"></mat-slider>\n                    {{settings.genesWeight['X']}}\n                </div>\n            </div>\n        </div>\n    </div>\n    \n</div>\n\n<div mat-dialog-actions class=\"buttons\">\n    <button mat-raised-button (click)=\"onReset()\">Reset to default</button>\n    <span class=\"spacer\"></span>\n    <button mat-raised-button color=\"primary\" (click)=\"onCancel()\">Cancel</button>\n    <button mat-raised-button color=\"accent\" [mat-dialog-close]=\"settings\" cdkFocusInitial>Save</button>\n</div>","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AboutComponent } from './about/about.component';\nimport { DonateComponent } from './donate/donate.component';\nimport { GeneticsComponent } from './genetics/genetics.component';\n\nconst routes: Routes = [\n    { path: '', component: GeneticsComponent },\n    { path: 'about', component: AboutComponent },\n    { path: 'donate', component: DonateComponent }\n];\n\n@NgModule({\n    imports: [RouterModule.forRoot(routes)],\n    exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { NgModule } from '@angular/core'\n\nimport { ClipboardModule } from '@angular/cdk/clipboard';\n\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatListModule } from '@angular/material/list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatTooltipModule } from '@angular/material/tooltip';\n\n@NgModule({\n    imports: [\n        MatInputModule,\n        MatButtonModule,\n        MatCardModule,\n        MatDividerModule,\n        MatToolbarModule,\n        MatSidenavModule,\n        MatGridListModule,\n        MatListModule,\n        MatIconModule,\n        MatDialogModule,\n        MatRadioModule,\n        MatProgressSpinnerModule,\n        MatSelectModule,\n        MatAutocompleteModule,\n        MatSliderModule,\n        MatTooltipModule,\n        ClipboardModule\n    ],\n    exports: [\n        MatInputModule,\n        MatButtonModule,\n        MatCardModule,\n        MatDividerModule,\n        MatToolbarModule,\n        MatSidenavModule,\n        MatGridListModule,\n        MatListModule,\n        MatIconModule,\n        MatDialogModule,\n        MatRadioModule,\n        MatProgressSpinnerModule,\n        MatSelectModule,\n        MatAutocompleteModule,\n        MatSliderModule,\n        MatTooltipModule,\n        ClipboardModule\n    ]\n})\nexport class MaterialModule {}","import { Component, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\n\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map, startWith, tap } from 'rxjs/operators';\n\nimport { MatDialog } from '@angular/material/dialog';\n\nimport { GeneticsService } from 'src/app/genetics.service';\nimport { Species } from 'src/app/genetis.models';\n\nimport { BreedingProcessViewerComponent } from './breeding-process-viewer/breeding-process-viewer.component';\n\n@Component({\n    selector: 'app-breeding-details',\n    templateUrl: './breeding-details.component.html',\n    styleUrls: ['./breeding-details.component.scss']\n})\nexport class BreedingDetailsComponent implements OnInit {\n    samplesDB: {[species: string]: Species[]};\n    \n    selectedSample!: Species;\n    \n    runningSimulation: boolean;\n    availableSpecies: Species[] = [];\n    \n    filteredSpecies: Species[];\n    \n    searchString: string = '';\n    searchGenesControlForm = new FormControl();\n    maxSpeciesToShow: number = 0;\n\n    nGenesOptions: number[] = [1, 2, 3, 4, 5, 6];\n    nGSelected?: number;\n    nYSelected?: number;\n    nHSelected?: number;\n\n    constructor(private geneticsService: GeneticsService, public dialog: MatDialog) {\n        this.samplesDB = {}\n        this.filteredSpecies = [];\n        this.runningSimulation = false;\n\n    }\n\n    ngOnInit(): void {\n        this.subscribeToResults();\n    }\n\n    subscribeToResults() {\n        this.geneticsService.getNewSamples()\n            .subscribe(samplesDB => {\n                this.samplesDB = samplesDB;\n\n                this.availableSpecies = [];\n                Object.keys(this.samplesDB).forEach(sample => {\n                    this.availableSpecies.push(this.samplesDB[sample][0]);\n                });\n\n                this.filteredSpecies = this.availableSpecies;\n                this.maxSpeciesToShow = 5;\n                // this.onLoadMore();\n            });\n\n        this.geneticsService.runningSimulation_Subject.subscribe(simulation => this.runningSimulation = simulation);\n    }\n\n    onSelect(sample: Species) {\n        this.selectedSample = sample;\n        this.dialog.open(BreedingProcessViewerComponent, {\n            data: sample\n        });\n    }\n\n    onLoadMore(nItems: number = 5) {\n        this.maxSpeciesToShow += nItems;\n    }\n\n    nGenesAvailables(currentLetter: string) {\n        const g = typeof(this.nGSelected) == \"undefined\" || currentLetter == \"G\" ? 0 : this.nGSelected;\n        const y = typeof(this.nYSelected) == \"undefined\" || currentLetter == \"Y\" ? 0 : this.nYSelected;\n        const h = typeof(this.nHSelected) == \"undefined\" || currentLetter == \"H\" ? 0 : this.nHSelected;\n\n        return 6 - (g + y + h);\n    }\n\n    onFiltersChange() {\n        this.filteredSpecies = this._mainFilter(this.searchString);\n    }\n\n    _mainFilter(searchString: string): Species[] {\n        // For filtering the searchString\n        const filterValue = searchString.toUpperCase();\n\n        // For filtering the num genes selector\n        const g = typeof(this.nGSelected) == \"undefined\" ? 0 : this.nGSelected;\n        const y = typeof(this.nYSelected) == \"undefined\" ? 0 : this.nYSelected;\n        const h = typeof(this.nHSelected) == \"undefined\" ? 0 : this.nHSelected;\n        const datRegex = `(?=(.*G.*){${g}})(?=(.*Y.*){${y}})(?=(.*H.*){${h}})` \n\n        // Chain of filters\n        return this.availableSpecies\n            .filter(specie => specie.genes.toUpperCase().startsWith(filterValue))\n            .filter(specie => specie.genes.search(datRegex) != -1)\n    }\n\n}\n","<!-- <div class=\"mainContainer\">\n\n    <div *ngIf=\"availableSpecies.length == 0 && !runningSimulation; else simulation\">\n        <div class=\"noSimulation\">\n            Add some samples and press \"Simulation\"\n        </div>\n    </div>\n    <ng-template #simulation>\n        <div class=\"tittle\">\n            <h1>Simulation Results</h1>\n        </div>\n        <form class=\"filter-form\">\n            <mat-form-field color=\"accent\" class=\"searchBar\">\n                <mat-label>Genes Search</mat-label>\n                <input type=\"text\"\n                    matInput\n                    [(ngModel)]=\"searchString\"\n                    (ngModelChange)=\"onFiltersChange()\"\n                    matTooltip=\"Search for specific genes\"\n                    matTooltipShowDelay=1000\n                    name=\"searchString\">\n            </mat-form-field>\n    \n            <mat-form-field color=\"accent\" class=\"nGenes\">\n                <mat-label>Number of G's</mat-label>\n                <mat-select [(ngModel)]=\"nGSelected\" name=\"numG\" (selectionChange)=\"onFiltersChange()\" matTooltip=\"Select Minimun number of G's to show\" matTooltipShowDelay=1000>\n                    <mat-option>Any</mat-option>\n                    <mat-option *ngFor=\"let number of nGenesOptions\"\n                        [value]=\"number\"\n                        [disabled]=\"number > nGenesAvailables('G')\">{{ number }}</mat-option>\n                </mat-select>\n            </mat-form-field>\n    \n            <mat-form-field color=\"accent\" class=\"nGenes\">\n                <mat-label>Number of Y's</mat-label>\n                <mat-select [(ngModel)]=\"nYSelected\" name=\"numY\" (selectionChange)=\"onFiltersChange()\" matTooltip=\"Select Minimun number of Y's to show\" matTooltipShowDelay=1000>\n                    <mat-option>Any</mat-option>\n                    <mat-option *ngFor=\"let number of nGenesOptions\"\n                        [value]=\"number\"\n                        [disabled]=\"number > nGenesAvailables('Y')\">{{ number }}</mat-option>\n                </mat-select>\n            </mat-form-field>\n    \n            <mat-form-field color=\"accent\" class=\"nGenes\">\n                <mat-label>Number of H's</mat-label>\n                <mat-select [(ngModel)]=\"nHSelected\" name=\"numH\" (selectionChange)=\"onFiltersChange()\" matTooltip=\"Select Minimun number of H's to show\" matTooltipShowDelay=1000>\n                    <mat-option>Any</mat-option>\n                    <mat-option *ngFor=\"let number of nGenesOptions\"\n                        [value]=\"number\"\n                        [disabled]=\"number > nGenesAvailables('H')\">{{ number }}</mat-option>\n                </mat-select>\n            </mat-form-field>\n    \n        </form>\n\n        <div class=\"dataContainer\">\n            <div class=\"loading\" *ngIf=\"runningSimulation\">\n                <app-loading-simulation></app-loading-simulation>\n            </div>\n            \n            <ul class=\"samples\">\n                <li *ngFor=\"let sample of filteredSpecies.slice(0,maxSpeciesToShow)\"\n                    [class.selected]=\"sample === selectedSample\"\n                    (click)=\"onSelect(sample)\">\n                    <app-seed-details [sample]=\"sample\"></app-seed-details>\n                </li>\n                <button\n                    *ngIf=\"filteredSpecies.length > maxSpeciesToShow\"\n                    mat-stroked-button\n                    (click)=\"onLoadMore()\"\n                    class=\"loadMoreButton\">\n                    Load More\n                </button>\n            </ul>\n        </div>\n    </ng-template>\n\n</div> -->\n\n<div class=\"resultsContainer\">\n    <div class=\"noSimulation\" *ngIf=\"availableSpecies.length == 0 && !runningSimulation; else simulation\">\n        Add some samples and press \"Simulation\" \n    </div>\n\n\n    <ng-template #simulation>\n        <div class=\"simulation\">\n\n            <div class=\"title\">\n                <h1>Simulation Results</h1>\n            </div>\n        \n            <div class=\"filters\">\n                <form class=\"filters-form\">\n                    <mat-form-field color=\"accent\" class=\"searchBar\">\n                        <mat-label>Genes Search</mat-label>\n                        <input type=\"text\"\n                            matInput\n                            [(ngModel)]=\"searchString\"\n                            (ngModelChange)=\"onFiltersChange()\"\n                            matTooltip=\"Search for specific genes\"\n                            matTooltipShowDelay=1000\n                            name=\"searchString\">\n                    </mat-form-field>\n            \n                    <mat-form-field color=\"accent\" class=\"nGenes\">\n                        <mat-label>Number of G's</mat-label>\n                        <mat-select [(ngModel)]=\"nGSelected\" name=\"numG\" (selectionChange)=\"onFiltersChange()\" matTooltip=\"Select Minimun number of G's to show\" matTooltipShowDelay=1000>\n                            <mat-option>Any</mat-option>\n                            <mat-option *ngFor=\"let number of nGenesOptions\"\n                                [value]=\"number\"\n                                [disabled]=\"number > nGenesAvailables('G')\">{{ number }}</mat-option>\n                        </mat-select>\n                    </mat-form-field>\n            \n                    <mat-form-field color=\"accent\" class=\"nGenes\">\n                        <mat-label>Number of Y's</mat-label>\n                        <mat-select [(ngModel)]=\"nYSelected\" name=\"numY\" (selectionChange)=\"onFiltersChange()\" matTooltip=\"Select Minimun number of Y's to show\" matTooltipShowDelay=1000>\n                            <mat-option>Any</mat-option>\n                            <mat-option *ngFor=\"let number of nGenesOptions\"\n                                [value]=\"number\"\n                                [disabled]=\"number > nGenesAvailables('Y')\">{{ number }}</mat-option>\n                        </mat-select>\n                    </mat-form-field>\n            \n                    <mat-form-field color=\"accent\" class=\"nGenes\">\n                        <mat-label>Number of H's</mat-label>\n                        <mat-select [(ngModel)]=\"nHSelected\" name=\"numH\" (selectionChange)=\"onFiltersChange()\" matTooltip=\"Select Minimun number of H's to show\" matTooltipShowDelay=1000>\n                            <mat-option>Any</mat-option>\n                            <mat-option *ngFor=\"let number of nGenesOptions\"\n                                [value]=\"number\"\n                                [disabled]=\"number > nGenesAvailables('H')\">{{ number }}</mat-option>\n                        </mat-select>\n                    </mat-form-field>\n            \n                </form>\n            </div>\n        \n            <div class=\"content\">\n                <div class=\"loading\" *ngIf=\"runningSimulation\">\n                    <app-loading-simulation></app-loading-simulation>\n                </div>\n                \n                <ul class=\"samples\">\n                    <li *ngFor=\"let sample of filteredSpecies.slice(0,maxSpeciesToShow)\"\n                        [class.selected]=\"sample === selectedSample\"\n                        (click)=\"onSelect(sample)\">\n                        <app-seed-details [sample]=\"sample\"></app-seed-details>\n                    </li>\n                    <button\n                        *ngIf=\"filteredSpecies.length > maxSpeciesToShow\"\n                        mat-stroked-button\n                        (click)=\"onLoadMore()\"\n                        class=\"loadMoreButton\">\n                        Load More\n                    </button>\n                </ul>\n            </div>\n        </div>\n    </ng-template>\n\n</div>","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}